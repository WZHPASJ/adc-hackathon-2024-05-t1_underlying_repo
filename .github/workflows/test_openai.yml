name: GPT Processing v6

on:
  workflow_dispatch:
    inputs:
      user_input:
        description: 'User input for GPT processing'
        required: true
        type: string
      branch:
        description: 'Select the branch to run the workflow on'
        required: true
        type: choice
        options:
          - dev
          - main
          # Add other branch names as needed
      target_branch:
        description: 'Select the target branch for the pull request'
        required: true
        type: choice
        options:
          - dev
          - main
          # Add other branch names as needed

jobs:
  process-with-gpt:
    runs-on: ubuntu-latest
    env:
      NEW_BRANCH_NAME: ${{ github.event.inputs.branch }}-gptOutput
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      #- name: Install my-gpt package
      #  run: |
      #    python -m pip install --upgrade pip
      #    pip install whl/adchackathon202405t1-0.0.2-py3-none-any.whl

      #- name: Extract repository content
      #  id: repo-content
      #  run: |
      #    repository_files=$(find . -type f -not -path '*/\.*')
      #    repository_context=""
      #    for file in $repository_files; do
      #      if grep -qI '.*' "$file"; then  # If the file is a text file, add its content
      #        repository_context+=$(echo "
      #          --- $file ---
      #          $(cat "$file")")
      #      else
      #        repository_context+=$(echo "
      #          --- $file ---
      #          <BINARY_FILE>")
      #      fi
      #    done
      #    
      #    repository_context=$(echo -n "$repository_context" | base64)
      #    echo "::set-output name=repository_context::$repository_context"

      #- name: Process with my-gpt package
      #  id: process-output
      #  run: |
      #    user_input="${{ github.event.inputs.user_input }}"
      #    repository_context="${{ steps.repo-content.outputs.repository_context }}"
      #    mkdir -p tests  # Ensure the directory exists
      #    touch tests/test.py  # Ensure the file exists
      #    echo "$repository_context" | base64 --decode > tests/test.py
      #    
      #    output=$(python -m src --user_input "$user_input" --underlying_repo tests/test.py)
      #    
      #    echo "$output"  # Debugging: Output the result to check
      #    echo "$output" > tests/test.py  # Ensure the output is written to the correct file

      - name: Install OpenAI dependencies
        run: |
          pip install openai
          # Other dependencies

      - name: Run GPT check
        run: python /src/pig_latin.py

      - name: Save report
        run: echo "GPT report" > report.txt

      - name: Move report to test directory
        run: mv report.txt /test/openai_report.txt

      - name: Commit and push changes
        run: |
         git config --local user.email "action@github.com"
         git config --local user.name "GitHub Action"
         git add /test/openai_report.txt
         git commit -m "Add GPT report"
         git push
